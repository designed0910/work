import json

import requests
from bs4 import BeautifulSoup

# 查询网站的URL
SEARCH_URL = 'https://rjbcsgz.wes2.com/toilet/sign/edit'  # 替换为实际的查询URL

headers = {
    "authority": "rjbcsgz.wes2.com",
    "method": "GET",
    "path": "/system/dept/treeData_copy",
    "scheme": "https",
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "zh,en;q=0.9,zh-CN;q=0.8",
    "Referer": "https://rjbcsgz.wes2.com/toilet/sign",
    "Sec-Ch-Ua": '"Chromium";v="122", "Not(A:Brand";v="24", "Google Chrome";v="122"',
    "Sec-Ch-Ua-Mobile": '?0',
    'Sec-Ch-Ua-Platform': '"Windows"',
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-origin",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "X-Requested-With": "XMLHttpRequest",
    "Cookie": 'JSESSIONID=7004d98b-2a4a-4883-8e66-b82e962e5102; SERVERID=aa74c3a957d2fbdcc7b8fc75688a4e69|1711720939|171172032775688a4e69|1711712497|1711712291'

}


# 定义查询函数，使用POST方法
def search_users_post(query_params):
    # 发送POST请求

    response = requests.post(SEARCH_URL, data=query_params, headers=headers)

    # 检查请求是否成功
    if response.status_code != 200:
        print(f"请求失败，状态码：{response.status_code}")
        return []

        # 解析HTML内容
    soup = BeautifulSoup(response.text, 'html.parser')

    return (str(soup))

    # 假设用户列表在class为'user-list'的ul元素中，每个用户是一个li元素

# 获取id所需的数据
def get_search_results(idcard):
    get_id_params = {
        "pageSize": "10",
        "pageNum": "1",
        "idcard": idcard,
        "beginTime": "2019-01-01",
        "endTime": "2024-02-29"
    }
    response = requests.post("https://rjbcsgz.wes2.com/toilet/sign/list", data=get_id_params, headers=headers)

    # 检查请求是否成功
    if response.status_code != 200:
        print(f"请求失败，状态码：{response.status_code}")
        return []

        # 解析HTML内容

    all_data= ((json.loads(response.text)))
    print(all_data)
    rows_data=(all_data["rows"][0])

    search_data = {}
    search_data["id"]=(rows_data["id"])
    search_data["deptName"] = (str(rows_data["deptName"])).replace("保定市曲阳县产德","")
    search_data["deptId"] = (rows_data["hamletDeptId"])
    search_data["homeName"] =rows_data["homeName"]
    search_data["idcard"]=rows_data["idcard"]

    search_data["phone"] = rows_data["phone"]
    search_data["homeConfirm"]=rows_data["homeConfirm"]
    search_data["examineName"]=rows_data["examineName"]
    print(search_data)
    return(search_data)





# 主函数
def edit_data(idcard):
    # 构造查询参数，这里假设我们需要传递的参数
    query_params = {
        "cityDeptId": "130600000000",
        "stay": "1",
        "toiletStatus": "1",
        # 是否为财政补贴，1为是，0为否
        "subsidyMethod": "1",
        "remakeType": "2",
        "originalQuestion": "1",
        "question": "0",
        "examineTime": "2022-08-19",
        "flushingMode": "5",
        "toilet": "2",
        "year": "2023",
        "disasterRebuild.disaster": "0",
        "disasterRebuild.rectifyType": "0",
        "disasterRebuild.rebuildNature": "0",
        "disasterRebuild.rebuildChangeType": "0"

    }
    query_params.update(get_search_results(idcard))
    # 调用查询函数
    users = search_users_post(query_params)


    # 查询id函数

    # 输出查询结果
    if users == '{"msg":"操作成功","code":0}':
        print("ok")
    else:
        print("未找到用户信息。")

    # 运行主函数



def main():
    id_data = """130634198803212536
130634197611122515
130634195507262519
130634197711022570
130634196910042529
13063419701012251X
130634196712062510
130634198904112518
130634194812022517
130634197009192510
130634198007102539
130634198505242518
130634198612292553
130634198405192517
13063419660927251X
130634196906212513
130634195605182512
130634198912132519
130634194906252516
130634197807092514
130634198610092515
130634197910062516
130634195208222517
13063419720125251X
130634196007192512
130634195307182557
130634196604182531
130634198105192515
130634198509172537
13063419720213251X
132437197104020012
130634196511030037
130634196002122515
130634196612202539
130634195306242511
13063419500210251X
130634197606132532
130634194712252518
130634196407272511
130634197409072518
13063419900521251X
130634197809052516
130634196910032523
130634195902162534
130634198205212528
130634198409152571
130634197301192550
130634197806122515
13063419460611252X
130634195012262533
130634195701152516
130634198608172559
130634198211192551
130634196704242538
130634197505292537
130634196911022511
130634196611172518
130634195503182589
130634195102182545
130634195608232511
130634197307132516
130634196408242533
13063419720109251X
130634198706012559
130634198908202510
130634196310112554
130634198807092519
130634196410242516
130634196010192513
130634195609192515
130634199110092513
130634196410072510
13063419461223251X
130634196101212532
130634197606052559
130634195212152515
130634197104172550
130634196009062519
130634199009092535
130634198011172513
130634197209282510
130634197002022519
130634195703202572
130634197404042512
130634197110162519
130634197511172531
130634197806152511
130634197708102510
130634194506112514
130634197910162517
130634197608152553
130634197403222511
130634196801102510
130634194811242518
130634195306262512
130634195401272516
130634197412202512
13063419561208251X
130634198509202513
130634198006282558
130634196212072536
130634194309252534
130634198111192554
130634196109082525
13063419871101257X
130634198012262510
130634195210092512
130634198211242520
130634199005222515
130634196011062518
130634198002102513
130634195703032518
130634196807292511
13063419840604257X
130634198712012512
130634195508272532
13063419710129259X
130634195508292541
130634198212292554
130634196504062516
130634199006292515
130634194903262532
130634196709112513
13063419730729251X
130634196211182514
130634198609192519
13063419740118251X
130634197006142550
130634195207112519
130634195804232535
130634197004032518
130634195705042547
130634197408292519
130634196609212568
130634197709082515
130634195509102533
130634195303022513
130634196311032513
130634196609272536
130634195210142516
130634197607042512
13063419520108254X
13063419640619251X
130634196809282536
130634198908122537
130634199501062514
130634196901152531
13063419801208251X
130634197007152515
130634196006292538
130634198008302516
130634195607092510
130634196311242537
130634198207072514
130634197501092538
130634194910202511
130634196005222511
130634196007112519
130634196306032519
13063419711226253X
130634195605232559
13063419780619253X
130634196207292518
130634197012132519
130634197701132514
130634196410062574
130634196502182514
130634194602012521
130634199211122515
130634194909242516
130634196812272515
130634197505152577
130634198610282511
130634198010122610
130634197401152513
130634197510222533
130634196806242512
130634198201162519
130634197302152577
130634196307142533
130634198907222536
130634199104052515
130634195002222538
130634198412232513
13063419561114255X
130634197003072518
130634199508172513
130634197507092539
130634197810222519
130634198004242536
130634195312032510
13063419830922251X
130634195308182516
130634196401232551
130634198506072530
130634196004125819
130634195409262515
130634197909142519
130634194702052539
13063419500514255X
130634195207162516
130634196010022514
130634197208302516
130634198011102515
130634198410192597
130634198410102539
130634195206202547
130634195008202511
130634197601032559
130634197201072519
130634197103112556
130634196910112558
130634197308082514
130634195108292518
13063419880620251X
130634198810102511
130634197105052518
130634197104092518
130634196509202514
130634195707192519
130634195805262517
130634197508222518
130634195011122539
130634196709052514
13063419650408252x
130634195404242531
130634196505012510
130634197611052510
130634197310092535
130634195902192514
130634197012142530
13063419570518251X
130634194806232534
130634196403082542
130634197309242516
130634197110022516
130634198005212515
130634196507272519
130634195207172538
130634195808202536
130634197508242519
130634198706152535
130634196206292524
130634196610102518
130634197304022514
130634198210102518
130634195510282529
130634198909282559
130634195809158027
130634198712032513
130634195004022513
130634195808012521
130634195005142517
130634196307092513
130634196810102635
130634197610062514
130634199001052539
130634198310292582
130634196809082518
130634198506102517
130634195912102519
130634196008022515
13063419891020251x
130634196803162517
130634195110102517
130634196609182549
130634195310082514
13063419650910253X
130634197304242517
130634196105262510
130634196304202510
130634197701172516
130634196503252510
130634195709112535
130634196009172515
130634195710162513
13063419531009251X
13063419651112253X
130634197010272518
130634195907062532
130634193103172518
130634196308292525
130634197309062558
130634198005052531
130634197110102559
130634196709182511
130634198108292554
130634198010262517
130634198008142559
13063419760223251x
130634197803282513
130634197011122546
130634198410022598
130634195410192534
13063419460327251X
130634195510202517
130634195603032510
130634198107192535
130634196508222521
130634197902062516
130634195202102530
130634198401242513
130634197112152525
130634196809272549
130634197705292558
130634198307112552
13063419620906253X
130634197202102513
130634196401152519
13063419830703251X
130634196306282518
130634197302032516
130634196609212517
130634196701292513
130634196309042536
130634197212252531
130634195401192516
130634195506222515
130634197702192519
130634197504302537
13063419811013255X
130634197111042543
130634196902012514
130634195501052537
130634197204132513
130634197605032513
130634195409122539
130634198508072534
130634197807212539
130634195211192515
130634198210092532
130634196408122527
130634194603172535
130634195706112513
130634197201132534"""
    id_split = (id_data.split("\n"))
    for id in id_split:
        edit_data(id.replace(" ",""))



if __name__ == '__main__':
    main()
